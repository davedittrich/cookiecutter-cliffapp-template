name: Test Build and Publish
on: [ push, pull_request ]

jobs:
  build-test:
    name: Test and Build
    runs-on: ubuntu-22.04
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
    - name: Dump select GitHub event context
      run: |
        echo "github.ref=${{ github.ref }}"
        echo "github.event.head_commit=$HEAD_COMMIT"
      env:
        HEAD_COMMIT: ${{ toJson(github.event.head_commit) }}
    - name: Check out src from GitHub
      uses: actions/checkout@v3.5.2
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9.16
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: test
        allow-softlinks: true
        auto-activate-base: false
        auto-update-conda: true
        channels: conda-forge
        channel-priority: flexible
        python-version: 3.9.16
        show-channel-urls: true
        use-only-tar-bz2: true
    - name: About conda
      run: |
        conda info
        conda list
        conda config --show
        conda config --show-sources
        conda config --set always_yes yes --set changeps1 no
    - name: Install dependencies
      run: |
        make install-dependencies
        echo "VERSION=$(python3 setup.py --version)"
    - name: Get variables
      id: get_vars
      run: |
        REPO=$(basename ${{ github.repository }})
        echo "REPO=${REPO}"
        echo ::set-output name=REPO::${REPO}

        BRANCH=${GITHUB_REF##*/}
        echo "BRANCH=${BRANCH}"
        echo ::set-output name=BRANCH::${BRANCH}

        VERSION=$(python3 setup.py --version 2>/dev/null)
        echo "VERSION=${VERSION}"
        echo ::set-output name=VERSION::${VERSION}

        TAG_VERSION=$(git describe --abbrev=0 --tags 2>/dev/null || true)
        echo "TAG_VERSION=${TAG_VERSION}"
        echo ::set-output name=TAG_VERSION::${TAG_VERSION}

        ARTIFACT="${REPO}-${BRANCH}"
        echo "ARTIFACT=${ARTIFACT}"
        echo ::set-output name=ARTIFACT::${REPO}-${BRANCH}
    # [1-test-build-publish]
    - name: Run tests
      run: make test
    # ![1-test-build-publish]
    - name: Build artifacts
      run: make bdist_wheel sdist twine-check
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags')
    - name: Display artifacts
      run: ls -lR dist
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags')
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.get_vars.outputs.ARTIFACT }}
        path: dist/*
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags')

  deploy:
    name: Publish
    if: >-
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags')
    needs:
      - build-test
    runs-on: ubuntu-22.04
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
    - name: Get variables
      id: get_vars
      run: |
        REPO=$(basename ${{ github.repository }})
        echo "REPO=${REPO}"
        echo ::set-output name=REPO::${REPO}

        BRANCH=${GITHUB_REF##*/}
        echo "BRANCH=${BRANCH}"
        echo ::set-output name=BRANCH::${BRANCH}

        ARTIFACT="${REPO}-${BRANCH}"
        echo "ARTIFACT=${ARTIFACT}"
        echo ::set-output name=ARTIFACT::${REPO}-${BRANCH}
    - name: Display artifacts
      run: |
        ls -lR
    # [2-test-build-publish]
    - name: Publish release candidate artifacts to TestPyPI
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags') &&
        contains(github.ref, 'rc') == true
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository_url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.@PROJECT@_TEST_PYPI_PASSWORD }}
        packages_dir: ${{ steps.get_vars.outputs.ARTIFACT }}
        verify_metadata: false
    - name: Publish tagged artifacts to PyPI
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags') &&
        contains(github.ref, 'rc') == false
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.@PROJECT@_PYPI_PASSWORD }}
        packages_dir: ${{ steps.get_vars.outputs.ARTIFACT }}
        verify_metadata: false
    # ![2-test-build-publish]

